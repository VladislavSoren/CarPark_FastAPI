"""
Есть два варианта построения архитектуры
Первый:
Одна сводная таблица RouteAutoDriver с ограничением на уникальность по всем столбцам
Таблица будет содержать поля по каждой сущности
Плюсы:
- Удобно заполнять в одном месте (легче прописать эндпоинт занесения данных в сводную таблицу)
- Простая архитектура
Минусы:
- Запросы будут Не оптимизированы, т.к. придётся дополнительно фильтровать данный из-за дублей
- Всё в одной куче
- Сложно делать запросы к данным в одной куче

Второй
Разделение на сущности transport_unit(водитель <> авто) и traffic_unit(маршрут <> transport_unit)
* <> - связь многие ко многим
Плюсы:
- Запросы будут правильны и оптимизированы (не нужно будет тянуть лишнее и потом в коде обрабатывать)
- Данные понятно разнесены
- Легче прописывать запросы
Минусы:
- Немножко хитрее придётся прописать эндпоинт для создания записи в transport_unit

Соображения:
Водитель может ездить на разных авто (разные транспортные единицы): Вова на Вольфе, Вова на Рено
Вова может ездить на разных авто на разных маршрутах: Вова на Вольфе в Питер, Вова на Рено в Омск
Поэтому целесообразно разделение сущностей
* Если в реальной задаче будут ограничения, например: водитель может ездить только на одном авто,
водитель может числится только на одном маршруте, то архитектуру можно будет упростить без
ущерба работы сервиса. Будет просто, но не криво. Но пока я решил учесть максимально
гибко возможное распределение между (водитель + авто) и (маршрут)

"""

# Первый вариант реализации архитектуры
# class DriverAutoRoute(Base):
#     # id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
#
#     driver_id: Mapped[int] = mapped_column(ForeignKey("driver.id"), primary_key=True)
#     auto_id: Mapped[int] = mapped_column(ForeignKey("auto.id"), primary_key=True)
#     route_id: Mapped[int] = mapped_column(ForeignKey("route.id"), primary_key=True)
#
#     # extra_data: Mapped[Optional[str]]
#     driver = relationship("Driver", back_populates="auto")
#     auto = relationship("Auto", back_populates="driver")
#     route: Mapped[List["Route"]] = relationship(back_populates="id_driver_auto")
#
#     # additional properties
#     __table_args__ = (UniqueConstraint("route_id", "driver_id", "auto_id", name="unique_unit"),)
